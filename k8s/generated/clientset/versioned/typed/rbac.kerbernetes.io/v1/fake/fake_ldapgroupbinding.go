// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/froz42/kerbernetes/k8s/api/rbac.kerbernetes.io/v1"
	rbackerbernetesiov1 "github.com/froz42/kerbernetes/k8s/generated/applyconfiguration/rbac.kerbernetes.io/v1"
	typedrbackerbernetesiov1 "github.com/froz42/kerbernetes/k8s/generated/clientset/versioned/typed/rbac.kerbernetes.io/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeLdapGroupBindings implements LdapGroupBindingInterface
type fakeLdapGroupBindings struct {
	*gentype.FakeClientWithListAndApply[*v1.LdapGroupBinding, *v1.LdapGroupBindingList, *rbackerbernetesiov1.LdapGroupBindingApplyConfiguration]
	Fake *FakeRbacKerbernetesV1
}

func newFakeLdapGroupBindings(fake *FakeRbacKerbernetesV1) typedrbackerbernetesiov1.LdapGroupBindingInterface {
	return &fakeLdapGroupBindings{
		gentype.NewFakeClientWithListAndApply[*v1.LdapGroupBinding, *v1.LdapGroupBindingList, *rbackerbernetesiov1.LdapGroupBindingApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("ldapgroupbindings"),
			v1.SchemeGroupVersion.WithKind("LdapGroupBinding"),
			func() *v1.LdapGroupBinding { return &v1.LdapGroupBinding{} },
			func() *v1.LdapGroupBindingList { return &v1.LdapGroupBindingList{} },
			func(dst, src *v1.LdapGroupBindingList) { dst.ListMeta = src.ListMeta },
			func(list *v1.LdapGroupBindingList) []*v1.LdapGroupBinding { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.LdapGroupBindingList, items []*v1.LdapGroupBinding) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

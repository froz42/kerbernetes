// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	context "context"
	time "time"

	apirbackerbernetesiov1 "github.com/froz42/kerbernetes/k8s/api/rbac.kerbernetes.io/v1"
	versioned "github.com/froz42/kerbernetes/k8s/generated/clientset/versioned"
	internalinterfaces "github.com/froz42/kerbernetes/k8s/generated/informers/externalversions/internalinterfaces"
	rbackerbernetesiov1 "github.com/froz42/kerbernetes/k8s/generated/listers/rbac.kerbernetes.io/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// LdapGroupBindingInformer provides access to a shared informer and lister for
// LdapGroupBindings.
type LdapGroupBindingInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() rbackerbernetesiov1.LdapGroupBindingLister
}

type ldapGroupBindingInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewLdapGroupBindingInformer constructs a new informer for LdapGroupBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewLdapGroupBindingInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredLdapGroupBindingInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredLdapGroupBindingInformer constructs a new informer for LdapGroupBinding type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredLdapGroupBindingInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RbacKerbernetesV1().LdapGroupBindings().List(context.Background(), options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RbacKerbernetesV1().LdapGroupBindings().Watch(context.Background(), options)
			},
			ListWithContextFunc: func(ctx context.Context, options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RbacKerbernetesV1().LdapGroupBindings().List(ctx, options)
			},
			WatchFuncWithContext: func(ctx context.Context, options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.RbacKerbernetesV1().LdapGroupBindings().Watch(ctx, options)
			},
		},
		&apirbackerbernetesiov1.LdapGroupBinding{},
		resyncPeriod,
		indexers,
	)
}

func (f *ldapGroupBindingInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredLdapGroupBindingInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *ldapGroupBindingInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apirbackerbernetesiov1.LdapGroupBinding{}, f.defaultInformer)
}

func (f *ldapGroupBindingInformer) Lister() rbackerbernetesiov1.LdapGroupBindingLister {
	return rbackerbernetesiov1.NewLdapGroupBindingLister(f.Informer().GetIndexer())
}
